# VBSbricks

VBSbricks is a set of VBScript modules.
Its purpose is to provide a tested set of functions and subroutines.

VBScript is defined as the following by [Wikipedia](http://en.wikipedia.org/wiki/VBScript) :

VBScript (Visual Basic Scripting Edition) is an
Active Scripting language developed by Microsoft that is modeled on Visual Basic.
It is designed as a "lightweight" language with a fast interpreter for use in a
wide variety of Microsoft environments."

# User Guide

## Documentation

The documentation of VBSbricks is generated by
[VBSdoc](http://www.planetcobalt.net/sdb/vbsdoc.shtml).
You can see the [generated documentation here](http://caglar.toklu.co/vbsbricks_doc_html/index.html)

## How to Install
VBSbricks needs no installation.
For a practical usage, however, you can use the following steps:

* Download or clone VBSbricks.
* Add its folder to system path.
Here is nice article from [How-to Geek](http://www.howtogeek.com/):
[How to Edit Your System PATH for Easy Command Line Access](http://www.howtogeek.com/118594/how-to-edit-your-system-path-for-easy-command-line-access/)
* Create your VBScript file that will access a VBSbricks module, and add the following code into it.
([Original link](http://gazeek.com/coding/importing-vbs-files-in-your-vbscript-project/) for this subroutine is dead,
so the code has been taken from [VBSdoc.vbs](https://github.com/miyamiya/VBSdoc/blob/5341e2ecc075f247ce2b00413cf089d0d03303cb/VBSdoc.vbs#L2744) itself.)
```VBScript
'! Import the first occurrence of the given filename from the working directory
'! or any directory in the %PATH%.
'!
'! @param  filename  Name of the file to import (can be either absolute or relative)
'!
'! @raise  Path not found (0x4c)
'!
'! @see http://gazeek.com/coding/importing-vbs-files-in-your-vbscript-project/
Private Sub Import(ByVal filename)
	Dim fso, sh, file, code, dir

	' Create my own objects, so the function is self-contained and can be called
	' before anything else in the script.
	Set fso = CreateObject("Scripting.FileSystemObject")
	Set sh = CreateObject("WScript.Shell")

	filename = Trim(sh.ExpandEnvironmentStrings(filename))
	If Not (Left(filename, 2) = "\\" Or Mid(filename, 2, 2) = ":\") Then
		' filename is not absolute
		If Not fso.FileExists(fso.GetAbsolutePathName(filename)) Then
			' file doesn't exist in the working directory => iterate over the
			' directories in the %PATH% and take the first occurrence
			' if no occurrence is found => use filename as-is, which will result
			' in an error when trying to open the file
			For Each dir In Split(sh.ExpandEnvironmentStrings("%PATH%"), ";")
				If fso.FileExists(fso.BuildPath(dir, filename)) Then
					filename = fso.BuildPath(dir, filename)
					Exit For
				End If
			Next
		End If
		filename = fso.GetAbsolutePathName(filename)
	End If

	On Error Resume Next
	Set file = fso.OpenTextFile(filename, 1, False)
	If Err Then
		WScript.Echo "Cannot import '" & filename & "': " & Err.Description & " (0x" & Hex(Err.Number) & ")"
		WScript.Quit 1
	End If
	On Error Goto 0
	code = file.ReadAll
	file.Close

	ExecuteGlobal(code)
End Sub
```
* Import the required libraries from your `.vbs` files as follows:

```VBScript
Call Import("vbsbricks_arrays.vbs")
Call Import("vbsbricks_files.vbs")
Call Import("vbsbricks_networking.vbs")
Call Import("vbsbricks_services.vbs")
Call Import("vbsbricks_strings.vbs")
```


### Clonning VBSbricks

```
git clone https://github.com/caglartoklu/vbsbricks.git
```

# Developer Guide


## Style Guide
* 4 spaces for indentation, and no tabs.
* Two lines between functions and subroutines.
* Vertical whitespace consisting of only one line.
* No empty lines before `End Function` and `End Subroutine`
* No empty lines after `Public Sub ...` and `Public Function ...`
* The modules should start with: `Option Explicit`
* All the functions and subroutines must have an explicit access modifier such as `Public Function ...` or `Private Function ...`
* All the functions, subroutines their parameters and returns values must be
[documented](https://github.com/miyamiya/VBSdoc/blob/master/README.txt) according to [VBSdoc](https://github.com/miyamiya/VBSdoc).
* Add the type of parameters at the end of its description line, such as:
`'! @param strPadChar string, the pad character to be used, string`
`'! @return string, padded copy of the string, string`
* No classes unless there is no other solution. We would like to be able to port most of the function and subroutines
to VBA. Since VBA has no classes, we would like to minimize the class usage in VBSbricks for maximum portability.

## Generating Documentation

[VBSdoc](http://www.planetcobalt.net/sdb/vbsdoc.shtml) is an API documentation
generator like [Javadoc](http://en.wikipedia.org/wiki/Javadoc), but for VBScript.

The documentation for VBSbricks is generated by VBSdoc.
So, you also need it if you want to generate the documentation.

Installation of VBSdoc is no different, simply download or clone it to your system.
Add its folder to system path as stated on [How-to Geek](http://www.howtogeek.com/):
[How to Edit Your System PATH for Easy Command Line Access](http://www.howtogeek.com/118594/how-to-edit-your-system-path-for-easy-command-line-access/)

### Clonning VBSdoc
```
git clone https://github.com/miyamiya/VBSdoc.git
```

Finally, execute [generate_doc.bat](generate_doc.bat).

The contents of [generate_doc.bat](generate_doc.bat) and the description
of the parameters are as follows:

```
VBSdoc.vbs /a /i:.  /p:VBSbricks /o:vbsbricks_doc_html /q

/a      Generate documentation for all elements (public and private).
        Without this option, documentation is generated for public
        elements only.
/i      Read input files from SOURCE. Can be either a file or a
        directory. (required)
/p      Use NAME as the project name.
/o      Create output files in DOC_DIR. (required)
/q      Don't print warnings. Ignored if debug messages are enabled.
```

You can see the description of all parameters
[here](https://github.com/miyamiya/VBSdoc/blob/master/README.md#usage).


Here is [VBSdoc homepage](http://www.planetcobalt.net/sdb/vbsdoc.shtml)
and it is also [on Github](https://github.com/miyamiya/VBSdoc).


## Unit Tests
* A custom made, very very basic unit test module named as [vbsbricks_unit.vbs](vbsbricks_unit.vbs)
is used to test the modules. You are encouraged to use it and feel free to contribute.
* If a module is named `vbsbricks_strings.vbs`, then its test module should be named as `vbsbricks_strings_test.vbs`.
* Test cases duplicated 3 subroutines and functions from [vbsbricks_files.vbs](vbsbricks_files.vbs):
`GetScriptDirectory()`, `PathCombine()` and `IncludeFile()`.
This is on purpose to reduce the dependency of [vbsbricks_unit.vbs](vbsbricks_unit.vbs) to other modules.
* A test template is provided as [vbsbrick_template_test.vbs](vbsbrick_template_test.vbs).


## Requirements

Except the VBScript itself, VBSbricks required the following:

* Microsoft Windows XP and newer
* [VBSdoc](https://github.com/miyamiya/VBSdoc) is required to compile the API documentation

# Resources

## VBSbricks
* [VBSbricks documentation](http://caglar.toklu.co/vbsbricks_doc_html/index.html)


## VBScript resources by Microsoft
* [VBScript on MSDN](http://msdn.microsoft.com/en-us/library/t0aew7h6.aspx)
* [VBScript User's Guide](http://msdn.microsoft.com/en-us/library/sx7b3k7y.aspx)
* [VBScript Language Reference](http://msdn.microsoft.com/en-us/library/d1wf56tt.aspx)

### ExecuteGlobal
* [ExecuteGlobal](https://msdn.microsoft.com/en-us/library/342311f1.aspx) statement
* [Why does VBScript have Execute, ExecuteGlobal and Eval?](http://blogs.msdn.com/b/ericlippert/archive/2003/09/20/53058.aspx)


## Wikipedia
* [http://en.wikipedia.org/wiki/VBScript](http://en.wikipedia.org/wiki/VBScript)


## Learn VBScript
* [http://www.w3schools.com/vbscript/](http://www.w3schools.com/vbscript/)
* [http://ss64.com/vb/](http://ss64.com/vb/)


## VBSdoc
* [https://github.com/miyamiya/VBSdoc](https://github.com/miyamiya/VBSdoc)
* [https://github.com/miyamiya/VBSdoc/blob/master/README.txt](https://github.com/miyamiya/VBSdoc/blob/master/README.txt)
* [http://www.planetcobalt.net/sdb/vbsdoc.shtml](http://www.planetcobalt.net/sdb/vbsdoc.shtml)


## Similar Projects
* [http://sourceforge.net/projects/vbslib/](http://sourceforge.net/projects/vbslib/)
* [http://code.google.com/p/vbslib/](http://code.google.com/p/vbslib/)


# License

Licensed with 2-clause license ("Simplified BSD License" or "FreeBSD License"). See the [LICENSE](LICENSE) file.


# Legal

All trademarks and registered trademarks are the property of their respective owners.


# Original Authors

* [https://github.com/caglartoklu](https://github.com/caglartoklu)
* [https://github.com/engintoklu](https://github.com/engintoklu)
